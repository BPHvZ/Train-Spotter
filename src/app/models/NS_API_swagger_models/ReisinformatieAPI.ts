/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/v2/departures": {
		/** List of departures for a specific station */
		get: operations["getDepartures"];
	};
	"/api/v2/arrivals": {
		/** List of arrivals for a specific station */
		get: operations["getArrivals"];
	};
	"/api/v2/journey": {
		/** Returns information about a specific journey */
		get: operations["getJourneyDetail"];
	};
	"/api/v3/trips/trip": {
		/** Returns a single trip, based on the given parameters */
		get: operations["getTrip"];
	};
	"/api/v1/calamities": {
		/** List of calamities. This operation is deprecated. Use /api/v3/disruptions instead */
		get: operations["getCalamities"];
	};
	"/api/v2/price/international": {
		/** Returns price information for international trips */
		get: operations["getInternationalPrices"];
	};
	"/api/v2/price": {
		/** Returns price information for domestic trips */
		get: operations["getPrices"];
	};
	"/api/v2/stations": {
		/** List of stations. */
		get: operations["getStations"];
	};
	"/api/v3/trips": {
		/** Returns a travel advice for the given parameters */
		get: operations["getTravelAdvice"];
	};
	"/api/v2/disruptions/station/{stationCode}": {
		/** List of disruptions relevant for the current station. This operation is deprecated. Use /api/v3/disruptions/station/{stationCode} instead. */
		get: operations["station_disruptions_v2"];
	};
	"/api/v2/disruptions/{id}": {
		/** Returns information on a single disruption/maintenance. This operation is deprecated. Use /api/v3/disruptions/{type}/{id} instead. */
		get: operations["disruption_v2"];
	};
	"/api/v2/disruptions": {
		/** List of disruptions/maintenance. This operation is deprecated. Use /api/v3/disruptions instead. */
		get: operations["disruptions_v2"];
	};
	"/api/v3/disruptions/station/{stationCode}": {
		/** List of disruptions relevant for the current station */
		get: operations["getStationDisruptions_v3"];
	};
	"/api/v3/disruptions/{type}/{id}": {
		/** Returns information on a single disruption/maintenance/calamity */
		get: operations["getDisruption_v3"];
	};
	"/api/v3/disruptions": {
		/** List of calamities/disruptions/maintenance. */
		get: operations["getDisruptions_v3"];
	};
}

export interface definitions {
	Coordinate: {
		lat: number;
		lng: number;
	};
	EticketNotBuyableReason: {
		reason:
			| "UNKNOWN_PRICE"
			| "TOO_MANY_SEPARATE_PARTS"
			| "TOO_FAR_IN_PAST"
			| "TOO_FAR_IN_FUTURE"
			| "STATION_NOT_OPEN_YET"
			| "TRIP_IS_NOT_DOMESTIC"
			| "VIA_STATION_REQUESTED"
			| "NO_TRAIN_LEGS_IN_TRIP";
		description?: string;
	};
	FareLeg: {
		origin: definitions["TripOriginDestination"];
		destination: definitions["TripOriginDestination"];
		operator?: string;
		productTypes: (
			| "TRAIN"
			| "BUS"
			| "TRAM"
			| "METRO"
			| "FERRY"
			| "WALK"
			| "BIKE"
			| "CAR"
			| "TAXI"
			| "SUBWAY"
			| "UNKNOWN"
		)[];
		fares: definitions["TripTravelFare"][];
	};
	FareRoute: {
		routeId: string;
		origin: definitions["Stop"];
		destination: definitions["Stop"];
	};
	JourneyDetailLink: {
		type: "BTM" | "TRAIN_XML" | "TRAIN_JSON";
		link: definitions["Link"];
	};
	JourneyRegistrationParameters: {
		url?: string;
		searchUrl: string;
		status:
			| "REGISTRATION_POSSIBLE"
			| "DATE_IN_PAST"
			| "DATE_TOO_FAR_FUTURE"
			| "NOT_NECESSARY_OTHER_OPERATOR"
			| "UNKNOWN";
	};
	Leg: {
		idx?: string;
		name?: string;
		travelType?: "PUBLIC_TRANSIT" | "WALK" | "TRANSFER" | "BIKE" | "CAR" | "KISS" | "TAXI" | "UNKNOWN";
		direction?: string;
		cancelled: boolean;
		changePossible: boolean;
		alternativeTransport: boolean;
		journeyDetailRef?: string;
		origin: definitions["TripOriginDestination"];
		destination: definitions["TripOriginDestination"];
		product?: definitions["Product"];
		notes?: definitions["Note"][];
		messages?: definitions["Message"][];
		stops: definitions["Stop"][];
		steps?: definitions["Step"][];
		coordinates?: number[][];
		crowdForecast?: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
		punctuality?: number;
		crossPlatformTransfer?: boolean;
		shorterStock?: boolean;
		changeCouldBePossible?: boolean;
		shorterStockWarning?: string;
		shorterStockClassification?: "BUSY" | "EXTRA_BUSY";
		journeyDetail?: definitions["JourneyDetailLink"][];
		reachable: boolean;
		plannedDurationInMinutes?: number;
		travelAssistanceDeparture?: definitions["ServiceBookingInfo"];
		travelAssistanceArrival?: definitions["ServiceBookingInfo"];
		overviewPolyLine?: definitions["Coordinate"][];
	};
	Link: {
		title?: string;
		url?: string;
	};
	Location: {
		name?: string;
		lat?: number;
		lng?: number;
		city?: string;
		country?: string;
	};
	Message: {
		id?: string;
		externalId?: string;
		head?: string;
		text?: string;
		lead?: string;
		routeIdxFrom?: number;
		routeIdxTo?: number;
		type?: "MAINTENANCE" | "DISRUPTION";
		startDate?: string;
		endDate?: string;
		startTime?: string;
		endTime?: string;
	};
	Note: {
		value?: string;
		key?: string;
		noteType?: "UNKNOWN" | "ATTRIBUTE" | "INFOTEXT" | "REALTIME" | "TICKET" | "HINT";
		priority?: number;
		routeIdxFrom?: number;
		routeIdxTo?: number;
		link?: definitions["Link"];
		isPresentationRequired: boolean;
		category?: "PLATFORM_INFORMATION" | "OVERCHECK_INSTRUCTION" | "UNKNOWN";
	};
	Product: {
		number?: string;
		categoryCode?: string;
		shortCategoryName?: string;
		longCategoryName?: string;
		operatorCode?: string;
		operatorName?: string;
		operatorAdministrativeCode?: number;
		type: "TRAIN" | "BUS" | "TRAM" | "METRO" | "FERRY" | "WALK" | "BIKE" | "CAR" | "TAXI" | "SUBWAY" | "UNKNOWN";
		displayName?: string;
	};
	ServiceBookingInfo: {
		name: string;
		tripLegIndex: string;
		stationUic?: string;
		serviceTypeIds: string[];
		defaultAssistanceValue: boolean;
		canChangeAssistance: boolean;
		message?: string;
	};
	Step: {
		distanceInMeters: number;
		durationInSeconds: number;
		startLocation: definitions["Location"];
		endLocation: definitions["Location"];
		instructions: string;
	};
	Stop: {
		varCode: number;
		name?: string;
	};
	TravelAdvice: {
		/** Source system that has generated these travel advices */
		source: "HARP" | "NEGENTWEE" | "GOOGLE" | "PAS";
		/** List of trips */
		trips: definitions["Trip"][];
		/** Scroll context to use when scrolling back in time. Can be used in scrollContext query parameter */
		scrollRequestBackwardContext?: string;
		/** Scroll context to use when scrolling forward in time. Can be used in scrollContext query parameter */
		scrollRequestForwardContext?: string;
		/** Optional message indicating why the list of trips is empty. */
		message?: string;
	};
	TravelAssistanceInfo: {
		termsAndConditionsLink: string;
		tripRequestId: number;
		isAssistanceRequired: boolean;
	};
	/** List of trips */
	Trip: {
		/** Unique identifier for this trip */
		uid: string;
		/** Reconstruction context for this trip. Can be used to reconstruct this exact trip with the v3/trips/trip endpoint */
		ctxRecon: string;
		/** Planned duration of this trip in minutes */
		plannedDurationInMinutes?: number;
		/** Actual duration of this trip in minutes, or the planned duration if no realtime information about this trip is available. */
		actualDurationInMinutes?: number;
		/** Number of public transit transfers */
		transfers: number;
		/** Status of this trip */
		status:
			| "CANCELLED"
			| "CHANGE_NOT_POSSIBLE"
			| "CHANGE_COULD_BE_POSSIBLE"
			| "ALTERNATIVE_TRANSPORT"
			| "DISRUPTION"
			| "MAINTENANCE"
			| "UNCERTAIN"
			| "REPLACEMENT"
			| "ADDITIONAL"
			| "SPECIAL"
			| "NORMAL";
		/** List of messages regarding maintenance or disruption that influences this trip. */
		messages?: definitions["Message"][];
		legs: definitions["Leg"][];
		overviewPolyLine?: definitions["Coordinate"][];
		crowdForecast?: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
		punctuality?: number;
		/** Whether or not this trip is regarded the best possible option of all returned trips */
		optimal: boolean;
		fareRoute?: definitions["FareRoute"];
		fares?: definitions["TripSalesFare"][];
		fareLegs?: definitions["FareLeg"][];
		productFare?: definitions["TripTravelFare"];
		fareOptions?: definitions["TripFareOptions"];
		bookingUrl?: definitions["Link"];
		type: "NS" | "NS_ACCESSIBLE" | "NEGENTWEE" | "GOOGLE" | "PAS";
		shareUrl?: definitions["Link"];
		realtime: boolean;
		travelAssistanceInfo?: definitions["TravelAssistanceInfo"];
		routeId?: string;
		registerJourney?: definitions["JourneyRegistrationParameters"];
	};
	TripFareOptions: {
		isInternationalBookable: boolean;
		isInternational: boolean;
		isEticketBuyable: boolean;
		isPossibleWithOvChipkaart: boolean;
		supplementsBasedOnSelectedFare?: definitions["TripFareSupplement"][];
		reasonEticketNotBuyable?: definitions["EticketNotBuyableReason"];
	};
	TripFareSupplement: {
		supplementPriceInCents: number;
		legIdx?: string;
		fromUICCode?: string;
		toUICCode?: string;
		link?: definitions["Link"];
	};
	TripOriginDestination: {
		name?: string;
		lng?: number;
		lat?: number;
		city?: string;
		countryCode?: string;
		uicCode?: string;
		type?: "STATION" | "ADDRESS" | "POINT_OF_INTEREST";
		prognosisType?: string;
		plannedTimeZoneOffset?: number;
		plannedDateTime?: string;
		actualTimeZoneOffset?: number;
		actualDateTime?: string;
		plannedTrack?: string;
		actualTrack?: string;
		exitSide?: "LEFT" | "RIGHT" | "UNKNOWN";
		checkinStatus?: "CHECKIN" | "CHECKOUT" | "OVERCHECK" | "DETOUR" | "REQUIRED_CHECK_OUT_IN" | "NOTHING";
		travelAssistanceBookingInfo?: definitions["ServiceBookingInfo"];
		travelAssistanceMeetingPoints?: string[];
		notes?: definitions["Note"][];
		quayCode?: string;
	};
	TripSalesFare: {
		priceInCents?: number;
		product?:
			| "OVCHIPKAART_ENKELE_REIS"
			| "OVCHIPKAART_RETOUR"
			| "TRAJECT_VRIJ_MAAND"
			| "TRAJECT_VRIJ_JAAR"
			| "BUSINESS_CARD_TRAJECT_VRIJ_JAAR"
			| "ETICKET_ENKELE_REIS"
			| "ETICKET_RETOUR"
			| "ETICKET_JOINT_JOURNEY_DISCOUNT_RETOUR"
			| "ETICKET_JOINT_JOURNEY_DISCOUNT_ENKELE_REIS"
			| "RAILRUNNER"
			| "ICE_SUPPLEMENT"
			| "ICD_SUPPLEMENT"
			| "NSI";
		travelClass?: "FIRST_CLASS" | "SECOND_CLASS";
		priceInCentsExcludingSupplement?: number;
		discountType: "NO_DISCOUNT" | "DISCOUNT_20_PERCENT" | "DISCOUNT_40_PERCENT" | "NO_CHARGE";
		supplementInCents?: number;
		link?: string;
	};
	TripTravelFare: {
		priceInCents?: number;
		priceInCentsExcludingSupplement?: number;
		supplementInCents?: number;
		product?:
			| "GEEN"
			| "OVCHIPKAART_ENKELE_REIS"
			| "OVCHIPKAART_RETOUR"
			| "DAL_VOORDEEL"
			| "ALTIJD_VOORDEEL"
			| "DAL_VRIJ"
			| "WEEKEND_VRIJ"
			| "ALTIJD_VRIJ"
			| "BUSINESSCARD"
			| "BUSINESSCARD_DAL"
			| "STUDENT_WEEK"
			| "STUDENT_WEEKEND"
			| "VDU"
			| "SAMENREISKORTING"
			| "TRAJECT_VRIJ";
		travelClass?: "FIRST_CLASS" | "SECOND_CLASS";
		discountType: "NO_DISCOUNT" | "DISCOUNT_20_PERCENT" | "DISCOUNT_40_PERCENT" | "NO_CHARGE";
		link?: string;
	};
	APIError: {
		timestamp: string;
		code: number;
		message: string;
		path: string;
		exception?: string;
		errors?: definitions["LocalizedErrorDetail"][];
		requestId: string;
	};
	LocalizedErrorDetail: {
		message: string;
		type: string;
		lang: string;
	};
	/** Information about the cause of the additional travel time that is expected */
	AdditionalTravelTime: {
		/** Human readable description of the additional travel time that is expected */
		label: string;
		/** Short human readable description of the additional travel time that is expected */
		shortLabel?: string;
		/** Minimum expected additional travel time in minutes */
		minimumDurationInMinutes?: number;
		/** Maximum expected additional travel time in minutes */
		maximumDurationInMinutes?: number;
	};
	/** Information about the cause of the alternative transport that is available to the user */
	AlternativeTransport: {
		/** Human readable description of the alternative transport that is available to the user */
		label: string;
		/** Short label indicating the alternative transport that is available to the user */
		shortLabel?: string;
	};
	/** Body items to render when showing this calamity */
	BodyItem: {
		title?: string;
		type: "TEXT" | "DOWNLOADS" | "LINKS";
		content: definitions["BodyItemContent"];
	};
	BodyItemContent: { [key: string]: any };
	Button: {
		label?: string;
		type?: "PLANNER" | "DISRUPTIONS" | "MAINTENANCE" | "EXTERNAL";
		accessibilityLabel?: string;
		url?: string;
	};
	/** Buttons to render when showing this calamity */
	Buttons: {
		position: ("TOP" | "BOTTOM")[];
		items: definitions["Button"][];
	};
	Calamity: {
		/** Unique identifier of the calamity */
		id: string;
		/** Title of the calamity */
		title: string;
		/** Topic to subscribe to in order to receive updates for this disruption. */
		topic?: string;
		/** Human readable description for this calamity */
		description?: string;
		/** Priority for this calamity */
		priority: "PRIO_1" | "PRIO_2" | "PRIO_3";
		/** Moment that this calamity was last updated */
		lastUpdated?: string;
		/** Expected moment that this calamity will be updated */
		expectedNextUpdate?: string;
		/** Body items to render when showing this calamity */
		bodyItems: definitions["BodyItem"][];
		buttons: definitions["Buttons"];
		type: "CALAMITY" | "DISRUPTION" | "MAINTENANCE";
		isActive: boolean;
	};
	/** Information about the cause of the disruption in this timespan */
	Cause: {
		/** Human readable description of the cause of the disruption */
		label: string;
	};
	Disruption: {
		/** Unique identifier of the disruption */
		id: string;
		/** Type of disruption */
		type: "CALAMITY" | "DISRUPTION" | "MAINTENANCE";
		/** Registration time of this disruption */
		registrationTime?: string;
		/** Release time of this disruption */
		releaseTime?: string;
		/** A local disruption has messages tailored towards a specific station. */
		local: boolean;
		/** Title of the disruption, containing the location(s) of the disruption */
		title: string;
		/** Topic to subscribe to in order to receive updates for this disruption. */
		topic?: string;
		/** Whether or not this item is active, i.e. it is currently happening. For example maintenance that starts in the future has this property set to false */
		isActive: boolean;
		/** Start time of the disruption */
		start: string;
		/** End time of the disruption. May be left empty if unknown */
		end?: string;
		/** Human readable description of the period for this disruption */
		period?: string;
		phase?: definitions["Phase"];
		impact?: definitions["Impact"];
		expectedDuration?: definitions["ExpectedDuration"];
		summaryAdditionalTravelTime?: definitions["AdditionalTravelTime"];
		/**
		 * Publication sections for this disruptions. Please note that these may be larger than the actual
		 * track sections where the disruption is. This has to do with stations being recognizable for the customer.
		 * For example, there could be a disruption between Utrecht Vaartse Rijn and Bunnik. In that case, the
		 * trajectory could be Utrecht Centraal to Driebergen-Zeist, as most customers do not know where Utrecht Vaartse
		 * Rijn and Bunnik are. In this case, the trajectory will contain Utrecht Centraal to Driebergen-Zeist, whereas
		 * the disruptedTrackSection will contain Utrecht Vaartse Rijn to Bunnik
		 */
		publicationSections: definitions["PublicationSection"][];
		/** Distinguishable timespans within this disruption. Multiple timespans may occur for maintenance. */
		timespans: definitions["Timespan"][];
	};
	DisruptionBase: {
		/** Unique identifier of the disruption */
		id: string;
		/** Type of disruption */
		type: "CALAMITY" | "DISRUPTION" | "MAINTENANCE";
		/** Title of the disruption, containing the location(s) of the disruption */
		title: string;
		/** Topic to subscribe to in order to receive updates for this disruption. */
		topic?: string;
		/** Whether or not this item is active, i.e. it is currently happening. For example maintenance that starts in the future has this property set to false */
		isActive: boolean;
	};
	DisruptionConsequence: {
		section: definitions["Section"];
		description?: string;
		level: "NO_OR_MUCH_LESS_TRAINS" | "LESS_TRAINS" | "NORMAL_OR_MORE_TRAINS";
	};
	Download: {
		title?: string;
		url?: string;
		contentLength: number;
		mimeType?: string;
		lastModified?: string;
	};
	DownloadsBodyItem: {
		title?: string;
		content: definitions["DownloadsBodyItemContent"];
		type: "TEXT" | "DOWNLOADS" | "LINKS";
	};
	DownloadsBodyItemContent: {
		downloads: definitions["Download"][];
	};
	/** Information on the expected duration for this disruption. Is empty for maintenance */
	ExpectedDuration: {
		/** Human readable description of the expected duration of the disruption. */
		description: string;
		/** Expected end time for this disruption */
		endTime?: string;
	};
	/** Impact of the disruption, from 0 - 5 */
	Impact: {
		value: number;
	};
	LinksBodyItem: {
		title?: string;
		content: definitions["LinksBodyItemContent"];
		type: "TEXT" | "DOWNLOADS" | "LINKS";
	};
	LinksBodyItemContent: {
		links: definitions["Link"][];
	};
	/** Phase of the disruption */
	Phase: {
		id: string;
		label: string;
	};
	/**
	 * Publication sections for this disruptions. Please note that these may be larger than the actual
	 * track sections where the disruption is. This has to do with stations being recognizable for the customer.
	 * For example, there could be a disruption between Utrecht Vaartse Rijn and Bunnik. In that case, the
	 * trajectory could be Utrecht Centraal to Driebergen-Zeist, as most customers do not know where Utrecht Vaartse
	 * Rijn and Bunnik are. In this case, the trajectory will contain Utrecht Centraal to Driebergen-Zeist, whereas
	 * the disruptedTrackSection will contain Utrecht Vaartse Rijn to Bunnik
	 */
	PublicationSection: {
		section: definitions["Section"];
		consequence?: definitions["DisruptionConsequence"];
	};
	Section: {
		stations: definitions["StationReference"][];
		direction: "ONE_WAY" | "BOTH";
	};
	/** Information about the situation caused by the disruption */
	Situation: {
		/** Human readable description of the situation caused by the disruption */
		label: string;
	};
	StationReference: {
		uicCode: string;
		stationCode?: string;
		name: string;
		coordinate?: definitions["Coordinate"];
		countryCode: string;
	};
	TextBodyItem: {
		title?: string;
		content: definitions["TextBodyItemContent"];
		type: "TEXT" | "DOWNLOADS" | "LINKS";
	};
	TextBodyItemContent: {
		text?: string;
	};
	/** Distinguishable timespans within this disruption. Multiple timespans may occur for maintenance. */
	Timespan: {
		/** Start time of this timespan */
		start: string;
		/** End time of this timespan. May be left empty if unknown */
		end?: string;
		/** Human readable description of the period for this disruption */
		period?: string;
		situation: definitions["Situation"];
		cause?: definitions["Cause"];
		additionalTravelTime?: definitions["AdditionalTravelTime"];
		alternativeTransport?: definitions["AlternativeTransport"];
		/** List of advices */
		advices: string[];
	};
	Station: {
		UICCode: string;
		stationType: string;
		EVACode?: string;
		code?: string;
		sporen: definitions["Track"][];
		synoniemen: string[];
		heeftFaciliteiten: boolean;
		heeftVertrektijden: boolean;
		heeftReisassistentie: boolean;
		namen?: definitions["StationsNamen"];
		land?: string;
		lat?: number;
		lng?: number;
		radius?: number;
		naderenRadius?: number;
		ingangsDatum?: string;
		eindDatum?: string;
	};
	StationResponse: {
		payload: definitions["Station"][];
		links?: { [key: string]: string };
		meta?: { [key: string]: string };
	};
	StationsNamen: {
		lang: string;
		middel: string;
		kort: string;
	};
	Track: {
		spoorNummer: string;
	};
	Price: {
		totalPriceInCents: number;
		priceDifferenceInCentsBetweenFirstAndSecondClass?: number;
		priceDifferenceInCentsBetweenJointJourneyDiscount?: number;
		operatorName?: string;
		travelDiscount: "NO_DISCOUNT" | "DISCOUNT_20" | "DISCOUNT_40" | "NO_CHARGE";
		travelClass: "FIRST_CLASS" | "SECOND_CLASS";
		travelProducts: (
			| "OVCHIPKAART_ENKELE_REIS"
			| "OVCHIPKAART_RETOUR"
			| "TRAJECT_VRIJ_MAAND"
			| "TRAJECT_VRIJ_JAAR"
			| "BUSINESS_CARD_TRAJECT_VRIJ_JAAR"
			| "RAILRUNNER"
			| "ETICKET_ENKELE_REIS"
			| "ETICKET_RETOUR"
			| "ETICKET_JOINT_JOURNEY_DISCOUNT_RETOUR"
			| "ETICKET_JOINT_JOURNEY_DISCOUNT_ENKELE_REIS"
		)[];
	};
	RepresentationResponsePrice: {
		payload: definitions["Price"];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	InternationalPrice: {
		priceInCents: number;
		priceInCentsExcludingSupplement: number;
		product: string;
		travelClass: "FIRST_CLASS" | "SECOND_CLASS";
		link?: string;
	};
	RepresentationResponseInternationalPrice: {
		payload: definitions["InternationalPrice"];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	ArrivalOrDeparture: {
		product: definitions["Product"];
		origin?: definitions["Station"];
		destination?: definitions["Station"];
		plannedTime?: string;
		actualTime?: string;
		delayInSeconds?: number;
		plannedTrack?: string;
		actualTrack?: string;
		cancelled: boolean;
		punctuality?: number;
		crowdForecast: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
		shorterStockClassification?: "BUSY" | "EXTRA_BUSY";
		stockIdentifiers?: string[];
	};
	CoachCrowdForecast: {
		paddingLeft: number;
		width: number;
		classification: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
	};
	Journey: {
		notes: definitions["Note"][];
		productNumbers: string[];
		stops: definitions["JourneyStop"][];
		allowCrowdReporting: boolean;
		source: string;
	};
	JourneyStop: {
		id: string;
		stop: definitions["Station"];
		previousStopId: string[];
		nextStopId: string[];
		destination?: string;
		status?:
			| "ORIGIN"
			| "SPLIT"
			| "STOP"
			| "PASSING"
			| "COMBINE"
			| "DESTINATION"
			| "STOP_CHANGED_ORIGIN"
			| "STOP_CHANGED_DESTINATION";
		kind?: "DEPARTURE" | "ARRIVAL" | "TRANSFER";
		arrivals: definitions["ArrivalOrDeparture"][];
		departures: definitions["ArrivalOrDeparture"][];
		actualStock?: definitions["Stock"];
		plannedStock?: definitions["Stock"];
		platformFeatures?: definitions["PlatformFeature"][];
		coachCrowdForecast?: definitions["CoachCrowdForecast"][];
	};
	Part: {
		stockIdentifier?: string;
		destination?: definitions["Station"];
		facilities: string[];
		image?: definitions["StockPartLink"];
	};
	PlatformFeature: {
		paddingLeft: number;
		width: number;
		type: string;
		description: string;
	};
	RepresentationResponseJourney: {
		payload: definitions["Journey"];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	Stock: {
		trainType?: string;
		numberOfSeats: number;
		numberOfParts: number;
		trainParts: definitions["Part"][];
		hasSignificantChange: boolean;
	};
	StockPartLink: {
		uri: string;
	};
	AlternatiefVervoer: {
		beschrijving?: string;
		begintijd?: string;
		eindtijd?: string;
	};
	Baanvak: {
		stations?: string[];
	};
	BaanvakBeperking: {
		van: definitions["StationCode"];
		tot: definitions["StationCode"];
	};
	Geldigheid: {
		startDatum?: string;
		eindDatum?: string;
		startTijd?: string;
		eindTijd?: string;
	};
	Gevolg: {
		stations?: string[];
		niveau?: "GEEN_OF_VEEL_MINDER_TREINEN" | "MINDER_TREINEN" | "NORMAAL_AANTAL_OF_MEER_TREINEN";
	};
	Melding: {
		id?: string;
		titel?: string;
		beschrijving?: string;
		type?: "prio_1" | "prio_2" | "prio_3";
		url?: string;
		buttonPositie?: "beide" | "boven" | "onder";
		laatstGewijzigd?: string;
		volgendeUpdate?: string;
		bodyItems?: definitions["BodyItem"][];
		buttons?: definitions["Button"][];
	};
	Reisadviezen: {
		titel?: string;
		reisadvies: definitions["VerstoringReisadvies"][];
	};
	RepresentationResponseListVerstoringContainer: {
		payload: definitions["VerstoringContainer"][];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	StationCode: {
		code?: string;
	};
	Traject: {
		stations?: string[];
		begintijd?: string;
		eindtijd?: string;
		richting?: "VANUIT" | "NAAR" | "VANUIT_EN_NAAR" | "HEEN" | "HEEN_EN_TERUG";
		gevolg?: definitions["Gevolg"];
	};
	Verstoring: {
		type: "MELDING_PRIO_1" | "MELDING_PRIO_2" | "MELDING_PRIO_3" | "STORING" | "WERKZAAMHEID" | "EVENEMENT";
		id?: string;
		baanvakBeperking?: definitions["BaanvakBeperking"][];
		reden?: string;
		extraReistijd?: string;
		leafletUrl?: string;
		reisadviezen?: definitions["Reisadviezen"];
		geldigheidsLijst: definitions["Geldigheid"][];
		verwachting?: string;
		gevolg?: string;
		gevolgType?: string;
		fase?: string;
		faseLabel?: string;
		impact?: number;
		maatschappij?: number;
		alternatiefVervoer?: string;
		alternatiefVervoerLijst?: definitions["AlternatiefVervoer"][];
		landelijk: boolean;
		oorzaak?: string;
		header?: string;
		meldtijd?: string;
		periode?: string;
		baanvakken?: definitions["Baanvak"][];
		trajecten?: definitions["Traject"][];
		versie?: string;
		volgnummer?: string;
		prioriteit?: number;
	};
	VerstoringContainer: {
		id?: string;
		type?: "prio_1" | "prio_2" | "prio_3" | "verstoring" | "werkzaamheid";
		titel?: string;
		url?: string;
		topic?: string;
		melding?: definitions["Melding"];
		verstoring?: definitions["Verstoring"];
	};
	VerstoringReisadvies: {
		titel?: string;
		advies: string[];
	};
	RepresentationResponseVerstoringContainer: {
		payload: definitions["VerstoringContainer"];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	Departure: {
		direction?: string;
		name: string;
		plannedDateTime?: string;
		plannedTimeZoneOffset?: number;
		actualDateTime?: string;
		actualTimeZoneOffset?: number;
		plannedTrack?: string;
		actualTrack?: string;
		product: definitions["Product"];
		trainCategory: string;
		cancelled: boolean;
		journeyDetailRef?: string;
		routeStations: definitions["RouteStation"][];
		messages: definitions["Message"][];
		departureStatus: "ON_STATION" | "INCOMING" | "DEPARTED" | "UNKNOWN";
	};
	DeparturesPayload: {
		source: string;
		departures: definitions["Departure"][];
	};
	RepresentationResponseDeparturesPayload: {
		payload: definitions["DeparturesPayload"];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	RouteStation: {
		uicCode?: string;
		mediumName?: string;
	};
	Arrival: {
		origin?: string;
		name: string;
		plannedDateTime?: string;
		plannedTimeZoneOffset?: number;
		actualDateTime?: string;
		actualTimeZoneOffset?: number;
		plannedTrack?: string;
		actualTrack?: string;
		product: definitions["Product"];
		trainCategory: string;
		cancelled: boolean;
		journeyDetailRef?: string;
		messages: definitions["Message"][];
		arrivalStatus: "ON_STATION" | "INCOMING" | "DEPARTED" | "UNKNOWN";
	};
	ArrivalsPayload: {
		source: string;
		arrivals: definitions["Arrival"][];
	};
	RepresentationResponseArrivalsPayload: {
		payload: definitions["ArrivalsPayload"];
		links?: { [key: string]: definitions["Link"] };
		meta?: { [key: string]: { [key: string]: any } };
	};
	CalamitiesResponse: {
		calamiteit?: definitions["Calamity"];
		meldingen?: definitions["Calamity"][];
	};
	ApiV3TripsGet200ApplicationJsonResponse: definitions["TravelAdvice"][];
	ApiV3TripsTripGet200ApplicationJsonResponse: definitions["TravelAdvice"][];
	ApiV3DisruptionsGet200ApplicationJsonResponse: definitions["DisruptionBase"][];
	"ApiV3DisruptionsStation-stationCode-GetdefaultApplicationJsonResponse": definitions["DisruptionBase"][];
}

export interface operations {
	/** List of departures for a specific station */
	getDepartures: {
		parameters: {
			query: {
				/** Language to use for localizing the departures list. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
				lang?: unknown;
				/** NS Station code for the station to return departures for. Can be left empty if uicCode parameter is provided. */
				station?: unknown;
				/** UIC code for the station to return departures for. Can be left empty if station parameter is provided. */
				uicCode?: unknown;
				/** Format - date-time (as date-time in RFC3339). Departure date to show departures from. Only supported for departures at foreign stations. Defaults to server time (Europe/Amsterdam) */
				dateTime?: unknown;
				/** Number of departures or departures to return. Defaults to 40 */
				maxJourneys?: unknown;
			};
		};
		responses: {
			/** A list of departures */
			200: {
				schema: definitions["RepresentationResponseDeparturesPayload"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Station name or uiccode provided in the parameters could not be found */
			404: {
				schema: definitions["APIError"];
			};
		};
	};
	/** List of arrivals for a specific station */
	getArrivals: {
		parameters: {
			query: {
				/** Language to use for localizing the arrivals list. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
				lang?: unknown;
				/** NS Station code for the station to return arrivals for. Can be left empty if uicCode parameter is provided. */
				station?: unknown;
				/** UIC code for the station to return arrivals for. Can be left empty if station parameter is provided. */
				uicCode?: unknown;
				/** Format - date-time (as date-time in RFC3339). Departure date to show arrivals from.  Only supported for arrivals at foreign stations. Defaults to server time (Europe/Amsterdam) */
				dateTime?: unknown;
				/** Number of departures or arrivals to return. Defaults to 40 */
				maxJourneys?: unknown;
			};
		};
		responses: {
			/** A list of arrivals */
			200: {
				schema: definitions["RepresentationResponseArrivalsPayload"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Station name or uiccode provided in the parameters could not be found */
			404: {
				schema: definitions["APIError"];
			};
		};
	};
	/** Returns information about a specific journey */
	getJourneyDetail: {
		parameters: {
			query: {
				/** Format - int32. Train number to return details for. Either the train number or journey identifier must be given */
				train?: unknown;
				/** Journey identifier. Can be found in as journeyDetailRef in the /api/v3/trips output. Either the train number of journey identifier must be given */
				id?: unknown;
				/** Format - date-time (as date-time in RFC3339). Date for this journey. Defaults to server time (Europe/Amsterdam) */
				dateTime?: unknown;
				/** UIC code of the station that will be indicated as kind = DEPARTURE in the output. */
				departureUicCode?: unknown;
				/** UIC code of the station that will be indicated as kind = TRANSFER in the output. */
				transferUicCode?: unknown;
				/** UIC code of the station that will be indicated as kind = ARRIVAL in the output. */
				arrivalUicCode?: unknown;
			};
		};
		responses: {
			/** Information about the journey */
			200: {
				schema: definitions["RepresentationResponseJourney"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Information about this journey could  not be found */
			404: {
				schema: definitions["APIError"];
			};
		};
	};
	/** Returns a single trip, based on the given parameters */
	getTrip: {
		parameters: {
			query: {
				/** Reconstruction context to use as basis for finding trip. Can be found in the /api/v3/trips output */
				ctxRecon: unknown;
				/** Format - date-time (as date-time in RFC3339). Datetime to use when reconstructing trip, may be a different date than the trip was originally planned. */
				date?: unknown;
				/** Specify directions or directionsOnly to include directions for walk/bike/car legs in the result. */
				travelRequestType?: unknown;
				/** Name of the product that will be used in travel. */
				product?: unknown;
				/** Discount of travel to use when calculating product prices */
				discount?: unknown;
				/** Format - int32. Class of travel to use when calculating product prices */
				travelClass?: unknown;
			};
			header: {
				/** Account details to use when querying trip assistance options */
				Authorization?: unknown;
				/** Language to use for localizing the travel advice. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
				lang?: unknown;
			};
		};
		responses: {
			/** A trip that matches the given parameters */
			200: {
				schema: definitions["ApiV3TripsTripGet200ApplicationJsonResponse"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Backend system failed in an unrecoverable way. */
			419: {
				schema: definitions["APIError"];
			};
		};
	};
	/** List of calamities. This operation is deprecated. Use /api/v3/disruptions instead */
	getCalamities: {
		parameters: {
			query: {
				/** Language to use for localizing the calamities */
				lang?: unknown;
			};
		};
		responses: {
			/** A list of calamities */
			200: {
				schema: definitions["CalamitiesResponse"];
			};
		};
	};
	/** Returns price information for international trips */
	getInternationalPrices: {
		parameters: {
			query: {
				/** UIC code of the origin station */
				fromStation: unknown;
				/** UIC code of the destination station */
				toStation: unknown;
				/** Format - date-time (as date-time in RFC3339). Planned departure time of the trip. */
				departureDateTime: unknown;
				/** Format - date-time (as date-time in RFC3339). Planned arrival time of the trip. */
				arrivalDateTime: unknown;
			};
		};
		responses: {
			/** Information about the price to pay given the input parameters */
			200: {
				schema: definitions["RepresentationResponseInternationalPrice"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Stationcode provided in the parameters could not be found, or the price is unknown */
			404: {
				schema: definitions["APIError"];
			};
		};
	};
	/** Returns price information for domestic trips */
	getPrices: {
		parameters: {
			query: {
				/** NS station code of the origin station */
				fromStation?: unknown;
				/** NS Station code of the destination station */
				toStation?: unknown;
				/** Travel class to return the price for */
				travelClass?: unknown;
				/** Return the price for a single or return trip. Defaults to single */
				travelType?: unknown;
				/** Set to true to return the price including joint journey discount */
				isJointJourney?: unknown;
				/** Format - int32. Number of adults to return the price for. Defaults to 1 */
				adults?: unknown;
				/** Format - int32. Number of children to return the price for. Defaults to 0 */
				children?: unknown;
				/** Specific identifier for the route to take between the two stations. This routeId is returned in the /api/v3/trips call. */
				routeId?: unknown;
				/** Format - date-time (as date-time in RFC3339). Planned departure time of the trip. Is used to find the correct route, if multiple routes are possible between the origin and destination station. */
				plannedFromTime?: unknown;
				/** Format - date-time (as date-time in RFC3339). Planned arrival time of the trip. Is used to find the correct route, if multiple routes are possible between the origin and destination station. */
				plannedArrivalTime?: unknown;
				/** Whether or not a yearcard should be included in price calculation. */
				yearCard?: unknown;
			};
		};
		responses: {
			/** Information about the price to pay given the input parameters */
			200: {
				schema: definitions["RepresentationResponsePrice"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Stationcode provided in the parameters could not be found or the price is unknown */
			404: {
				schema: definitions["APIError"];
			};
		};
	};
	/** List of stations. */
	getStations: {
		responses: {
			/** A list of stations that can be used to plan trips */
			200: {
				schema: definitions["StationResponse"];
			};
		};
	};
	/** Returns a travel advice for the given parameters */
	getTravelAdvice: {
		parameters: {
			query: {
				/** Language to use for localizing the travel advice. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
				lang?: unknown;
				/** NS station code of the origin station */
				fromStation?: unknown;
				/** UIC code of the origin station */
				originUicCode?: unknown;
				/** Latitude of the origin location. Should be used together with originLng. If the origin is a station, just provide the uicCode instead of the lat/lng */
				originLat?: unknown;
				/** Longitude of the origin location. Should be used together with originLat. If the origin is a station, just provide the uicCode instead of the lat/lng */
				originLng?: unknown;
				/** Name of the origin location. Will be returned in the response */
				originName?: unknown;
				/** NS station code of the destination station */
				toStation?: unknown;
				/** UIC code of the destination station */
				destinationUicCode?: unknown;
				/** Latitude of the destination location. Should be used together with destinationLng. If the destination is a station, just provide the uicCode instead of the lat/lng */
				destinationLat?: unknown;
				/** Longitude of the destination location. Should be used together with destinationLat. If the destination is a station, just provide the uicCode instead of the lat/lng */
				destinationLng?: unknown;
				/** Name of the destination location. Will be returned in the response */
				destinationName?: unknown;
				/** NS station code of the via station */
				viaStation?: unknown;
				/** UIC code of the via station */
				viaUicCode?: unknown;
				/** Latitude of the via location. Should be used together with viaLng. Will only be used for door-to-door trips. If the via location is a station, just provide the uicCode instead of the lat/lng. */
				viaLat?: unknown;
				/** Longitude of the via location. Should be used together with viaLat. Will only be used for door-to-door trips. If the via location is a station, just provide the uicCode instead of the lat/lng. */
				viaLng?: unknown;
				/** Return trip advices with walking options to start travel from origin to a train station (first mile) */
				originWalk?: unknown;
				/** Return trip advices with biking options to start travel from origin to a train station (first mile) */
				originBike?: unknown;
				/** Return trip advices with car options to start travel from origin to a train station (first mile) */
				originCar?: unknown;
				/** Return trip advices with walking options to finish travel to the destination (last mile) */
				destinationWalk?: unknown;
				/** Return trip advices with biking options to finish travel to the destination (last mile) */
				destinationBike?: unknown;
				/** Return trip advices with car options to finish travel to the destination (last mile) */
				destinationCar?: unknown;
				/** Format - date-time (as date-time in RFC3339). Datetime that the user want to depart from his origin or or arrive at his destination */
				dateTime?: unknown;
				/** If set, the date and time parameters specify the arrival time for the trip search instead of the departure time */
				searchForArrival?: unknown;
				/** Use searchForArrival parameter instead */
				departure?: unknown;
				/** Parameter specifying that the user wants a next or previous page of the results */
				context?: unknown;
				/** Changes the CHANGE_NOT_POSSIBLE status to CHANGE_COULD_BE_POSSIBLE if the traveler can walk twice as fast */
				shorterChange?: unknown;
				/** Format - int32. Extra time in minutes required at all transfers to change trains. */
				addChangeTime?: unknown;
				/** Format - int32. Use addChangeTime instead */
				minimalChangeTime?: unknown;
				/** Format - int32. Waiting time in minutes at the via location, exclusive of transfer time */
				viaWaitTime?: unknown;
				/** Use travelAssistance parameter instead */
				originAccessible?: unknown;
				/** Return trip advices from the trip assistance booking engine PAS */
				travelAssistance?: unknown;
				/** Format - int32. Use addChangeTime parameter instead */
				travelAssistanceTransferTime?: unknown;
				/** Accesibility equipment to use when searching for trip assistance options (AVG/PAS) */
				accessibilityEquipment1?: unknown;
				/** Accesibility equipment to use when searching for trip assistance options (AVG/PAS) */
				accessibilityEquipment2?: unknown;
				/** Return trip advices that are accessible. (might be bookable too) */
				searchForAccessibleTrip?: unknown;
				/** Could be used to filter for REGIONAL_TRAINS. This parameter is replaced by the localTrainsOnly parameter */
				filterTransportMode?: unknown;
				/** Search only for local train options, i.e. sprinter/sneltrein/stoptrein */
				localTrainsOnly?: unknown;
				/** Exclude high speed trains from results (including those with a required reservation) */
				excludeHighSpeedTrains?: unknown;
				/** Exclude trains for domestic trips that require a reservation (e.g. Thalys) */
				excludeTrainsWithReservationRequired?: unknown;
				/** Show options which are only allowed with a year card */
				yearCard?: unknown;
				/** Name of the product that will be used in travel */
				product?: unknown;
				/** Discount of travel to use when calculating product prices */
				discount?: unknown;
				/** Format - int32. Class of travel to use when calculating product prices */
				travelClass?: unknown;
				/** Enables/disables the calculation of the polyline for each leg of the trip except any GIS route. */
				polylines?: unknown;
				/** Show intermediate stops that the journey passes but doesn't stop at */
				passing?: unknown;
				/** directionsOnly only plans a google directions (walk/bike/car) advice */
				travelRequestType?: unknown;
			};
			header: {
				/** Account details to use when querying trip assistance options */
				Authorization?: unknown;
			};
		};
		responses: {
			/** A traveladvice with zero or more trips */
			200: {
				schema: definitions["ApiV3TripsGet200ApplicationJsonResponse"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Backend system failed in an unrecoverable way. */
			419: {
				schema: definitions["APIError"];
			};
		};
	};
	/** List of disruptions relevant for the current station. This operation is deprecated. Use /api/v3/disruptions/station/{stationCode} instead. */
	station_disruptions_v2: {
		parameters: {
			path: {
				/** NS Station code or UIC code for the station to return disruptions for. Case insensitive */
				stationCode: unknown;
			};
		};
		responses: {
			/** A list of disruptions relevant for the given station */
			200: {
				schema: definitions["RepresentationResponseListVerstoringContainer"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Station not found */
			404: {
				schema: definitions["APIError"];
			};
			/** A list of disruptions relevant for the given station */
			500: {
				schema: definitions["RepresentationResponseListVerstoringContainer"];
			};
		};
	};
	/** Returns information on a single disruption/maintenance. This operation is deprecated. Use /api/v3/disruptions/{type}/{id} instead. */
	disruption_v2: {
		parameters: {
			path: {
				/** Unique identifier of the disruption to return. Can be found using the /api/v2/disruptions call */
				id: unknown;
			};
		};
		responses: {
			/** The requested disruption */
			200: {
				schema: definitions["RepresentationResponseVerstoringContainer"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Disruption not found or wrong type given */
			404: {
				schema: definitions["APIError"];
			};
			/** The requested disruption */
			500: {
				schema: definitions["RepresentationResponseVerstoringContainer"];
			};
		};
	};
	/** List of disruptions/maintenance. This operation is deprecated. Use /api/v3/disruptions instead. */
	disruptions_v2: {
		parameters: {
			query: {
				/** Type of the disruptions to be returned. If not present all types will be returned. */
				type?: unknown;
				/** Flag to filter maintenance to only return active items, i.e. maintenance that is happening right now */
				actual?: unknown;
			};
			header: {
				/** Language for the disruptions. Defaults to nl. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for details. Please note that only the calamities will be translated, as no translation is available for maintenance and disruptions */
				lang?: unknown;
			};
		};
		responses: {
			/** A list of disruptions */
			200: {
				schema: definitions["RepresentationResponseListVerstoringContainer"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
		};
	};
	/** List of disruptions relevant for the current station */
	getStationDisruptions_v3: {
		parameters: {
			path: {
				stationCode: unknown;
			};
		};
		responses: {
			/** A list of disruptions relevant for the given station */
			200: {
				schema: definitions["ApiV3DisruptionsStation-stationCode-GetdefaultApplicationJsonResponse"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Station not found */
			404: {
				schema: definitions["APIError"];
			};
			/** A list of disruptions relevant for the given station */
			500: {
				schema: definitions["ApiV3DisruptionsStation-stationCode-GetdefaultApplicationJsonResponse"];
			};
		};
	};
	/** Returns information on a single disruption/maintenance/calamity */
	getDisruption_v3: {
		parameters: {
			path: {
				/** Disruption type for the disruption to return. */
				type: unknown;
				/** Unique identifier of the disruption to return. Can be found using the /api/v3/disruptions call */
				id: unknown;
			};
		};
		responses: {
			/** The requested disruption */
			200: {
				schema: definitions["DisruptionBase"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
			/** Disruption not found or wrong type given */
			404: {
				schema: definitions["APIError"];
			};
			/** The requested disruption */
			500: {
				schema: definitions["DisruptionBase"];
			};
		};
	};
	/** List of calamities/disruptions/maintenance. */
	getDisruptions_v3: {
		parameters: {
			query: {
				/** Type of the disruptions to be returned. If not present all types will be returned. */
				type?: unknown;
				/** Flag to filter maintenance to only return active items, i.e. maintenance that is happening right now */
				isActive?: unknown;
			};
			header: {
				/** Language for the disruptions. Defaults to nl. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for details. Please note that only the calamities will be translated, as no translation is available for maintenance and disruptions */
				"Accept-Language"?: unknown;
			};
		};
		responses: {
			/** A list of disruptions */
			200: {
				schema: definitions["ApiV3DisruptionsGet200ApplicationJsonResponse"];
			};
			/** Bad request. One or more parameters are invalid */
			400: {
				schema: definitions["APIError"];
			};
		};
	};
}
