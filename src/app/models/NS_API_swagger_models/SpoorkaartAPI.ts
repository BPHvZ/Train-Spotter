/*
 * trainSpotter
 * Copyright (C) 2021 bart
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/v1/spoorkaart": {
		/** Returns geojson information for all rail tracks in The Netherlands */
		get: operations["getSpoorkaart"];
	};
	"/api/v1/storingen": {
		/** Disruptions and maintenance geojson features. Disruptions and maintenance IDs originate from other API: reisinfo/api/v3/disruptions */
		get: operations["getStoringen"];
	};
	"/api/v1/storingen{extension}": {
		/** Disruptions and maintenance geojson features. Disruptions and maintenance IDs originate from other API: reisinfo/api/v3/disruptions */
		get: operations["getStoringenWithExtension"];
	};
	"/api/v1/storingen/{id}": {
		/** Disruptions or maintenance geojson feature based on an ID */
		get: operations["getStoring"];
	};
	"/api/v1/traject{extension}": {
		/** A (geo)json map line of the list of stations specified */
		get: operations["getTraject"];
	};
}

export interface definitions {
	Crs: {
		type?: "name" | "link";
		properties?: { [key: string]: { [key: string]: any } };
	};
	Feature: {
		crs?: definitions["Crs"];
		bbox?: number[];
		properties?: { [key: string]: { [key: string]: any } };
		geometry?: definitions["GeoJsonObject"];
		id?: string;
	};
	FeatureCollection: {
		crs?: definitions["Crs"];
		bbox?: number[];
		features?: definitions["Feature"][];
	};
	FeatureCollectionRepresentation: {
		self?: {
			uri?: string;
			params?: { [key: string]: string };
			title?: string;
			rel?: string;
			uriBuilder?: { [key: string]: any };
			rels?: string[];
			type?: string;
		};
		links?: {
			[key: string]: {
				uri?: string;
				params?: { [key: string]: string };
				title?: string;
				rel?: string;
				uriBuilder?: { [key: string]: any };
				rels?: string[];
				type?: string;
			};
		};
		payload?: definitions["FeatureCollection"];
		meta?: { [key: string]: { [key: string]: any } };
	};
	GeoJsonObject: {
		crs?: definitions["Crs"];
		bbox?: number[];
		type: string;
	};
	GeometryCollection: definitions["GeoJsonObject"] & {
		geometries?: definitions["GeoJsonObject"][];
	};
	LineString: definitions["GeoJsonObject"] & {
		coordinates?: definitions["LngLatAlt"][];
	};
	LngLatAlt: {
		longitude?: number;
		latitude?: number;
		altitude?: number;
		additionalElements?: number[];
	};
	MultiLineString: definitions["GeoJsonObject"] & {
		coordinates?: definitions["LngLatAlt"][][];
	};
	MultiPoint: definitions["GeoJsonObject"] & {
		coordinates?: definitions["LngLatAlt"][];
	};
	MultiPolygon: definitions["GeoJsonObject"] & {
		coordinates?: definitions["LngLatAlt"][][][];
	};
	Point: definitions["GeoJsonObject"] & {
		coordinates?: definitions["LngLatAlt"];
	};
	Polygon: definitions["GeoJsonObject"] & {
		coordinates?: definitions["LngLatAlt"][][];
	};
}

export interface operations {
	/** Returns geojson information for all rail tracks in The Netherlands */
	getSpoorkaart: {
		responses: {
			/** A list of geojson features */
			200: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** A list of geojson features */
			400: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** A list of geojson features */
			500: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
		};
	};
	/** Disruptions and maintenance geojson features. Disruptions and maintenance IDs originate from other API: reisinfo/api/v3/disruptions */
	getStoringen: {
		parameters: {
			query: {
				/** Only disruptions/maintenance after a date */
				startDate?: unknown;
				/** Only disruptions/maintenance before a date */
				endDate?: unknown;
				/** Only actual disruptions and maintenance */
				actual?: unknown;
			};
		};
		responses: {
			/** When requesting json, response is a list of geojson features with disruptions */
			200: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** When requesting json, response is a list of geojson features with disruptions */
			400: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** When requesting json, response is a list of geojson features with disruptions */
			500: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
		};
	};
	/** Disruptions and maintenance geojson features. Disruptions and maintenance IDs originate from other API: reisinfo/api/v3/disruptions */
	getStoringenWithExtension: {
		parameters: {
			path: {
				/** Extension */
				extension: unknown;
			};
			query: {
				/** Only disruptions/maintenance after a date */
				startDate?: unknown;
				/** Only disruptions/maintenance before a date */
				endDate?: unknown;
				/** Only actual disruptions and maintenance */
				actual?: unknown;
			};
		};
		responses: {
			/** When requesting json, response is a list of geojson features with disruptions */
			200: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** When requesting json, response is a list of geojson features with disruptions */
			400: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** When requesting json, response is a list of geojson features with disruptions */
			500: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
		};
	};
	/** Disruptions or maintenance geojson feature based on an ID */
	getStoring: {
		parameters: {
			path: {
				/** ID of the disruption */
				id: unknown;
			};
			query: {
				/** When requesting geojson format use .geojson */
				extension?: unknown;
			};
		};
		responses: {
			/** List of geojson features about disruptions */
			200: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** List of geojson features about disruptions */
			400: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** List of geojson features about disruptions */
			500: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
		};
	};
	/** A (geo)json map line of the list of stations specified */
	getTraject: {
		parameters: {
			path: {
				/** Extension */
				extension: unknown;
			};
			query: {
				/** list of stationcodes (more than 1). Note that the station have to be connected directly with each other. A line from Roermond to Maarheeze would be RM,WT,MH. Roermond, Weert, Maarheeze */
				stations?: unknown;
			};
		};
		responses: {
			/** A geojson map line between two stations */
			200: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** A geojson map line between two stations */
			400: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
			/** A geojson map line between two stations */
			500: {
				schema: definitions["FeatureCollectionRepresentation"];
			};
		};
	};
}
