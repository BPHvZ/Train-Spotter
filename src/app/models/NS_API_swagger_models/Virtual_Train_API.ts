/*
 * trainSpotter
 * Copyright (C) 2021 bart
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/v1/ingekort": {
		/** List of trains which are shortened at some station */
		get: operations["getAll"];
	};
	"/api/v1/ingekort/{ritnummer}/{station}": {
		/** Detailed information about a train being shortened */
		get: operations["getTreinInfo"];
	};
	"/api/v2/ingekort": {
		/** List of trains which are shortened at some station with corresponding crowdedness indicator string */
		get: operations["getAll_1"];
	};
	"/api/v1/prognose/{ritnummer}": {
		/** Information about the crowd forecast of a train */
		get: operations["getTreinInfo_1"];
	};
	"/api/v1/ritnummer/{materieelnummer}": {
		/** Converts a materieelnummer to a ritnummer */
		get: operations["getTreinInformatie"];
	};
	"/api/v1/stop/{stopCode}": {
		/** Get a specific stop */
		get: operations["getStop"];
	};
	"/api/v1/stop": {
		/** Get all stops */
		get: operations["getStops"];
	};
	"/api/v1/trein/{ritnummer}": {
		/** Information about a certain train */
		get: operations["getTreinInformatie_1"];
	};
	"/api/v1/trein": {
		/** Information about all trains */
		get: operations["getTreinInformatie_2"];
	};
	"/api/v1/trein/{ritnummer}/{stationscode}": {
		/** Information about a specified train at a specified station */
		get: operations["getTreinInformatie_3"];
	};
	"/api/v1/images/{image}": {
		/** Train image */
		get: operations["getImage"];
	};
	"/api/v1/images/{materieel}/{image}": {
		/** RollingStock image */
		get: operations["getImageFromSubdirectory"];
	};
	"/api/vehicle": {
		/** Information about all vehicles */
		get: operations["getVehicles"];
	};
}

export interface definitions {
	Ingekort: {
		geplandeSamenstelling?: string[];
		actueleSamenstelling?: string[];
		geplandeCapaciteit?: number;
		actueleCapaciteit?: number;
		prognose?: number;
		voldoendeAfwijking?: boolean;
		ingekort?: boolean;
		classification?: "UNKNOWN" | "HIGH" | "MEDIUM" | "LOW";
		verwachting?: number;
		daActueleCapaciteit?: number;
	};
	PrognoseInfomatie: {
		verwachting?: number;
		station?: string;
		capaciteit?: number;
		classifiction?: "UNKNOWN" | "HIGH" | "MEDIUM" | "LOW";
		prognose?: number;
	};
	Stop: {
		stopId?: string;
		stopCode?: string;
		stopName?: string;
		lat?: number;
		lng?: number;
		locationType?: string;
		parentStation?: string;
		stopTimezone?: string;
		wheelchairBoarding?: string;
		platformCode?: string;
		zoneId?: string;
		notAnNsStation?: boolean;
		regularStation?: boolean;
	};
	Afbeelding: { [key: string]: any };
	Bak: {
		afbeelding?: definitions["Afbeelding"];
		drukte?: "HIGH" | "MEDIUM" | "LOW" | "UNKNOWN";
	};
	ImageData: {
		imageUrl?: string;
		width?: number;
		height?: number;
	};
	PerronVoorziening: {
		paddingLeft?: number;
		width?: number;
		type?: string;
		description?: string;
	};
	TreinDeel: {
		materieelType?:
			| "DDZ_4"
			| "DDZ_6"
			| "DDZ_4SA"
			| "SGMM_2"
			| "SGMM_3"
			| "SNG_3"
			| "SNG_4"
			| "SLT_4"
			| "SLT_4E"
			| "SLT_4ES"
			| "SLT_6"
			| "SLT_6E"
			| "SLT_6ES"
			| "FLIRT_2"
			| "FLIRT_2_ARR"
			| "FLIRT_3_ARR"
			| "FLIRT_2_RNET"
			| "FLIRT_3"
			| "FLIRT_3_NS"
			| "FLIRT_3_FFF"
			| "FLIRT_3_BLAUWNET"
			| "FLIRT_3_KEOLIS"
			| "FLIRT_4"
			| "FLIRT_4_NS"
			| "FLIRT_4_FFF"
			| "FLIRT_4_SY"
			| "FLIRT_4_KEOLIS"
			| "FLIRT_ABELLIO"
			| "FLIRT_CONNEXXION"
			| "VIRM_4"
			| "VIRMm1_4"
			| "VIRM_6"
			| "VIRMm1_6"
			| "DB_REGIO_643"
			| "DB_BPMZ"
			| "DB_BER9_9"
			| "DB_AVMZ"
			| "DB_B15"
			| "OEBB_BMZ"
			| "MS80M3"
			| "MS75_4"
			| "DDM1_4DDM"
			| "ICR_GV1_9_B10"
			| "ICR_GV2_9_B10"
			| "ICR_BNL_6_B10"
			| "ICR_BNN_6_B10"
			| "ICR_HSL_6_B10"
			| "ICR_7"
			| "SW6_25KV_2_6"
			| "SW7_25KV_2_7"
			| "SW9_25KV_2_9"
			| "ELOC_1700"
			| "ELOC_TR25"
			| "ELOC_TRBE"
			| "ELOC_TRAX"
			| "CPROTOS_2"
			| "DM90_2"
			| "DDAR_3"
			| "EUROSTAR"
			| "THALYS"
			| "TGV_PB"
			| "ICE"
			| "ICE_3"
			| "MAT64"
			| "GTW26"
			| "GTWE26"
			| "GTW28"
			| "GTWE28"
			| "GTWE26_VECHTDAL"
			| "GTWE28_VETCHDAL"
			| "GTW26_LIMBURG"
			| "GTW28_LIMBURG"
			| "GTWE26_LIMBURG"
			| "GTWE28_LIMBURG"
			| "GTW26_ARRIVA"
			| "GTW28_ARRIVA"
			| "GTWE26_ARRIVA"
			| "GTWE28_ARRIVA"
			| "GTW26_VEOLIA"
			| "GTW28_VEOLIA"
			| "GTWE26_VEOLIA"
			| "GTWE28_VEOLIA"
			| "GTW8_BRENG"
			| "GTW26_QBUZZ"
			| "GTW28_QBUZZ"
			| "LINT2"
			| "LINT2_ARRIVA"
			| "LINT2_VEOLIA"
			| "LINT2_SYNTUS"
			| "LINT2_KEOLIS"
			| "ICM3"
			| "ICM4"
			| "UNKNOWN";
		drukteSVGPath?: string;
		materieelnummer?: number;
		type?: string;
		faciliteiten?: ("TOILET" | "STILTE" | "STROOM" | "TOEGANKELIJK" | "FIETS" | "WIFI" | "BISTRO")[];
		afbeelding?: string;
		eindbestemming?: string;
		bakken?: definitions["Bak"][];
		zitplaatsInfo?: definitions["ZitplaatsInformatie"];
		afbeeldingsSpecs?: definitions["ImageData"];
	};
	TreinDrukte: { [key: string]: any };
	TreinInformatie: {
		crowdInfoResponse?: string;
		crowdInfoRequest?: string;
		bron?: "DVS" | "KV6" | "OBIS" | "DAGPLAN" | "NMBS";
		ritnummer?: number;
		station?: string;
		type?: string;
		vervoerder?: string;
		spoor?: string;
		materieeldelen?: definitions["TreinDeel"][];
		geplandeMaterieeldelen?: definitions["TreinDeel"][];
		ingekort?: boolean;
		lengte?: number;
		lengteInMeters?: number;
		lengteInPixels?: number;
		geplandeLengte?: number;
		perronVoorzieningen?: definitions["PerronVoorziening"][];
		bakbord?: number;
		rijrichting?: "LINKS" | "RECHTS";
		drukteVoorspelling?: definitions["TreinDrukte"];
		treinDelen?: definitions["TreinDeel"][];
	};
	ZitplaatsInformatie: {
		staanplaatsEersteKlas?: number;
		staanplaatsTweedeKlas?: number;
		zitplaatsEersteKlas?: number;
		zitplaatsTweedeKlas?: number;
		klapstoelEersteKlas?: number;
		klapstoelTweedeKlas?: number;
	};
	MaterieelDeel: {
		materieelDeel?: number;
		lat?: number;
		lng?: number;
		snelheid?: number;
		richting?: number;
	};
	Trein: {
		ritId?: string;
		lat?: number;
		lng?: number;
		snelheid?: number;
		richting?: number;
		horizontaleNauwkeurigheid?: number;
		type?: string;
		materieelDeelList?: definitions["MaterieelDeel"][];
		treinCloneWithMaterieel?: definitions["Trein"];
	};
	Treinen: {
		treinen?: definitions["Trein"][];
	};
	ApiV1IngekortGetdefaultApplicationJsonResponse: string;
	ApiV2IngekortGetdefaultApplicationJsonResponse: string;
}

export interface operations {
	/** List of trains which are shortened at some station */
	getAll: {
		responses: {
			/** Information about a shorter train in the following format: trainNumber_stationCode. The station code indicates where the train will be shortened. */
			200: {
				schema: definitions["ApiV1IngekortGetdefaultApplicationJsonResponse"];
			};
			/** Information about a shorter train in the following format: trainNumber_stationCode. The station code indicates where the train will be shortened. */
			400: {
				schema: definitions["ApiV1IngekortGetdefaultApplicationJsonResponse"];
			};
			/** Information about a shorter train in the following format: trainNumber_stationCode. The station code indicates where the train will be shortened. */
			500: {
				schema: definitions["ApiV1IngekortGetdefaultApplicationJsonResponse"];
			};
		};
	};
	/** Detailed information about a train being shortened */
	getTreinInfo: {
		parameters: {
			path: {
				/** Format - int32. Ritnummer of the train. */
				ritnummer: unknown;
				/** Station code */
				station: unknown;
			};
		};
		responses: {
			/** Information about a shorter train */
			200: {
				schema: definitions["Ingekort"];
			};
			/** Information about a shorter train */
			400: {
				schema: definitions["Ingekort"];
			};
			/** Information about a shorter train */
			500: {
				schema: definitions["Ingekort"];
			};
		};
	};
	/** List of trains which are shortened at some station with corresponding crowdedness indicator string */
	getAll_1: {
		responses: {
			/** Information about a shorter train in the following format: trainNumber_stationCode. The station code indicates where the train will be shortened. The corresponding crowdedness indicator string can one one of the following: [BUSY, EXTRA BUSY] */
			200: {
				schema: definitions["ApiV2IngekortGetdefaultApplicationJsonResponse"];
			};
			/** Information about a shorter train in the following format: trainNumber_stationCode. The station code indicates where the train will be shortened. The corresponding crowdedness indicator string can one one of the following: [BUSY, EXTRA BUSY] */
			400: {
				schema: definitions["ApiV2IngekortGetdefaultApplicationJsonResponse"];
			};
			/** Information about a shorter train in the following format: trainNumber_stationCode. The station code indicates where the train will be shortened. The corresponding crowdedness indicator string can one one of the following: [BUSY, EXTRA BUSY] */
			500: {
				schema: definitions["ApiV2IngekortGetdefaultApplicationJsonResponse"];
			};
		};
	};
	/** Information about the crowd forecast of a train */
	getTreinInfo_1: {
		parameters: {
			path: {
				/** Format - int32. Ritnummer of the train */
				ritnummer: unknown;
			};
		};
		responses: {
			/** Shows the crowd forecast of a certain train */
			200: {
				schema: definitions["PrognoseInfomatie"];
			};
			/** Shows the crowd forecast of a certain train */
			400: {
				schema: definitions["PrognoseInfomatie"];
			};
			/** Shows the crowd forecast of a certain train */
			500: {
				schema: definitions["PrognoseInfomatie"];
			};
		};
	};
	/** Converts a materieelnummer to a ritnummer */
	getTreinInformatie: {
		parameters: {
			path: {
				/** Format - int32. Materieelnummer of the train */
				materieelnummer: unknown;
			};
		};
		responses: {
			/** A ritnummer. */
			200: unknown;
			/** A ritnummer. */
			400: unknown;
			/** A ritnummer. */
			500: unknown;
		};
	};
	/** Get a specific stop */
	getStop: {
		parameters: {
			path: {
				/** The stopCode of the stop. */
				stopCode: unknown;
			};
		};
		responses: {
			/** Information about a stop */
			200: {
				schema: definitions["Stop"];
			};
			/** Information about a stop */
			400: {
				schema: definitions["Stop"];
			};
			/** Information about a stop */
			500: {
				schema: definitions["Stop"];
			};
		};
	};
	/** Get all stops */
	getStops: {
		responses: {
			/** List of all stops */
			200: {
				schema: definitions["Stop"];
			};
			/** List of all stops */
			400: {
				schema: definitions["Stop"];
			};
			/** List of all stops */
			500: {
				schema: definitions["Stop"];
			};
		};
	};
	/** Information about a certain train */
	getTreinInformatie_1: {
		parameters: {
			path: {
				/** Format - int32. The 'ritnummer' (number) of the train. */
				ritnummer: unknown;
			};
			query: {
				/** Comma seperated list of features. */
				features?: unknown;
				/** Datetime to search in ISO8601. */
				dateTime?: unknown;
			};
			header: {
				"x-api-key"?: unknown;
			};
		};
		responses: {
			/** Information about the requested train */
			200: {
				schema: definitions["TreinInformatie"];
			};
			/** Information about the requested train */
			400: {
				schema: definitions["TreinInformatie"];
			};
			/** Information about the requested train */
			500: {
				schema: definitions["TreinInformatie"];
			};
		};
	};
	/** Information about all trains */
	getTreinInformatie_2: {
		parameters: {
			query: {
				/** Comma seperated list of id's. Note that all of the following parameters only work in conjuction with the id parameter. */
				ids?: unknown;
				/** Comma seperated list of Station codes */
				stations?: unknown;
				/** Comma seperated list of features. */
				features?: unknown;
				/** Datetime to search in ISO8601 */
				dateTime?: unknown;
				/** Whether to get information about all the stations */
				all?: unknown;
			};
			header: {
				"x-api-key"?: unknown;
			};
		};
		responses: {
			/** List of information about all trains */
			200: {
				schema: definitions["TreinInformatie"];
			};
			/** List of information about all trains */
			400: {
				schema: definitions["TreinInformatie"];
			};
			/** List of information about all trains */
			500: {
				schema: definitions["TreinInformatie"];
			};
		};
	};
	/** Information about a specified train at a specified station */
	getTreinInformatie_3: {
		parameters: {
			path: {
				/** Format - int32. The 'ritnummer' (number) of the train. */
				ritnummer: unknown;
				/** Code of the station */
				stationscode: unknown;
			};
			query: {
				/** Comma seperated list of features */
				features?: unknown;
				/** Datetime to search in ISO8601. */
				dateTime?: unknown;
			};
			header: {
				"x-api-key"?: unknown;
			};
		};
		responses: {
			/** Information about the requested train */
			200: {
				schema: definitions["TreinInformatie"];
			};
			/** Information about the requested train */
			400: {
				schema: definitions["TreinInformatie"];
			};
			/** Information about the requested train */
			500: {
				schema: definitions["TreinInformatie"];
			};
		};
	};
	/** Train image */
	getImage: {
		parameters: {
			path: {
				/** Name of the image including extension, usually .png. */
				image: unknown;
			};
		};
		responses: {
			/** default response */
			200: unknown;
			/** default response */
			400: unknown;
			/** default response */
			500: unknown;
		};
	};
	/** RollingStock image */
	getImageFromSubdirectory: {
		parameters: {
			path: {
				/** Name of the subdirectory */
				materieel: unknown;
				/** Name of the image including extension, usually .png. */
				image: unknown;
			};
		};
		responses: {
			/** default response */
			200: unknown;
			/** default response */
			400: unknown;
			/** default response */
			500: unknown;
		};
	};
	/** Information about all vehicles */
	getVehicles: {
		parameters: {
			query: {
				/** Format - float. Latitude coordinate */
				lat?: unknown;
				/** Format - float. Longitude coordinate */
				lng?: unknown;
				/** Format - int32. Radius around the given coordinates in meters. */
				radius?: unknown;
				/** Format - int32. Maximum number of vehicles to return. */
				limit?: unknown;
				/** Type of material to return. If the materieel value is used the material number of the train will be returned. */
				features?: unknown;
			};
		};
		responses: {
			/** List of vehicles */
			200: {
				schema: definitions["Treinen"];
			};
			/** List of vehicles */
			400: {
				schema: definitions["Treinen"];
			};
			/** List of vehicles */
			500: {
				schema: definitions["Treinen"];
			};
		};
	};
}
